HeatTemplateFormatVersion: '2012-12-12'
Description: |
  Template which tests autoscaling
Parameters:
  KeyName:
    Type: String
  InstanceType:
    Type: String
  ImageId:
    Type: String
  StackStart:
    Description: Epoch seconds when the stack was launched
    Type: Number
  ConsumeStopSeconds:
    Description: Seconds after StackStart when memory should be released
    Type: Number
Resources:
  CfnUser: {Type: 'AWS::IAM::User'}
  SmokeKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: {Ref: CfnUser}
  SmokeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Standard firewall rules
      SecurityGroupIngress:
      - {IpProtocol: icmp, FromPort: '-1', ToPort: '-1', CidrIp : 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '80', ToPort: '80', CidrIp: 0.0.0.0/0}
  ServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      LaunchConfigurationName: {Ref: LaunchConfig}
      MinSize: '1'
      MaxSize: '3'
  ServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: {Ref: ServerGroup}
      Cooldown: '60'
      ScalingAdjustment: '1'
  ServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: {Ref: ServerGroup}
      Cooldown: '60'
      ScalingAdjustment: '-1'
  MEMAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if MEM > 70% for 10 seconds
      MetricName: MemoryUtilization
      Namespace: system/linux
      Statistic: Average
      Period: '10'
      EvaluationPeriods: '1'
      Threshold: '70'
      AlarmActions:
      - {Ref: ServerScaleUpPolicy}
      Dimensions:
      - Name: AutoScalingGroupName
        Value: {Ref: ServerGroup}
      ComparisonOperator: GreaterThanThreshold
  MEMAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if MEM < 55% for 10 seconds
      MetricName: MemoryUtilization
      Namespace: system/linux
      Statistic: Average
      Period: '10'
      EvaluationPeriods: '1'
      Threshold: '55'
      AlarmActions:
      - {Ref: ServerScaleDownPolicy}
      Dimensions:
      - Name: AutoScalingGroupName
        Value: {Ref: ServerGroup}
      ComparisonOperator: LessThanThreshold
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-credentials:
              content:
                Fn::Replace:
                - $AWSAccessKeyId: {Ref: SmokeKeys}
                  $AWSSecretKey: {'Fn::GetAtt': [SmokeKeys, SecretAccessKey]}
                - |
                  AWSAccessKeyId=$AWSAccessKeyId
                  AWSSecretKey=$AWSSecretKey
              mode: '000400'
              owner: root
              group: root
            /root/watch_loop:
              content:
                - |
                  #!/bin/bash
                  while :
                  do
                    /opt/aws/bin/cfn-push-stats --mem-util
                    sleep 4
                  done
              mode: '000700'
              owner: root
              group: root
            /root/consume_memory:
              content:
                Fn::Replace:
                - StackStart: {Ref: StackStart}
                  ConsumeStopSeconds: {Ref: ConsumeStopSeconds}
                - |
                  #!/usr/bin/env python
                  import psutil
                  import time
                  import datetime
                  import sys
                  import syslog
                  a = []
                  while time.time() < StackStart + ConsumeStopSeconds:
                      vm = psutil.virtual_memory()
                      syslog.syslog(syslog.LOG_INFO, 'consume mem %s' % vm.percent)
                      if vm.percent < 70:
                          a.append(' ' * 10**7)
                      time.sleep(8)
                  sys.exit(0)
              mode: '000700'
              owner: root
              group: root
    Properties:
      ImageId: {Ref: ImageId}
      InstanceType: {Ref: InstanceType}
      KeyName: {Ref: KeyName}
      SecurityGroups: [{Ref: SmokeSecurityGroup}]
      UserData:
        Fn::Base64:
          Fn::Replace:
          - 'AWS::StackName': {Ref: 'AWS::StackName'}
            'AWS::Region': {Ref: 'AWS::Region'}
          - |
            #!/bin/bash -v
            /opt/aws/bin/cfn-init -s AWS::StackName -r LaunchConfig --region AWS::Region
            # yum make-cache gobbles up the whole of root.
            rm -rf /var/cache/yum/
            # report on memory consumption every 4 seconds
            at -q b -f /root/watch_loop now
            # ramp up memory consumption until it is over 70%
            # then exits ConsumeStopSeconds seconds after stack launch
            /root/consume_memory &
