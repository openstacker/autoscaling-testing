HeatTemplateFormatVersion: '2012-12-12'
Description: |
  Template which tests autoscaling
Parameters:
  KeyName:
    Type: String
    Default: heat_key
  InstanceType:
    Type: String
    Default: m1.micro
  ImageId:
    Type: String
  StackStart:
    Description: Epoch seconds when the stack was launched
    Type: Number
  ConsumeStopSeconds:
    Description: Seconds after StackStart when memory should be released
    Type: Number
    Default: '360'
Resources:
  Recorder: {Type: 'OS::Heat::EventRecorder'}
  CfnUser: {Type: 'AWS::IAM::User'}
  SmokeKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: {Ref: CfnUser}
  SmokeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Standard firewall rules
      SecurityGroupIngress:
      - {IpProtocol: icmp, FromPort: '-1', ToPort: '-1', CidrIp : 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '22', ToPort: '22', CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: '80', ToPort: '80', CidrIp: 0.0.0.0/0}
  ServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      LaunchConfigurationName: {Ref: LaunchConfig}
      MinSize: '1'
      MaxSize: '3'
      Tags:
      - {Key: metering.server_group, Value: ServerGroup}
  ServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: {Ref: ServerGroup}
      Cooldown: '60'
      ScalingAdjustment: '1'
  ServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: {Ref: ServerGroup}
      Cooldown: '60'
      ScalingAdjustment: '-1'
  MEMAlarmHigh:
    Type: OS::Metering::Alarm
    Properties:
      description: Scale-up if the average CPU > 50% for 1 minute
      counter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '50'
      alarm_actions:
      - {"Fn::GetAtt": [ServerScaleUpPolicy, AlarmUrl]}
        {'Fn::GetAtt': ['Recorder', 'AlarmUrl']}
      insufficient_data_actions:
      - {'Fn::GetAtt': ['Recorder', 'AlarmUrl']}
      ok_actions:
        {'Fn::GetAtt': ['Recorder', 'AlarmUrl']}
      matching_metadata: {'metadata.user_metadata.server_group': 'ServerGroup'}
      comparison_operator: gt
  CPUAlarmLow:
    Type: OS::Metering::Alarm
    Properties:
      description: Scale-down if the average CPU < 15% for 1 minute
      counter_name: cpu_util
      statistic: avg
      period: '60'
      evaluation_periods: '1'
      threshold: '15'
      alarm_actions:
      - {"Fn::GetAtt": [WebServerScaleDownPolicy, AlarmUrl]}
        {'Fn::GetAtt': ['Recorder', 'AlarmUrl']}
      insufficient_data_actions:
      - {'Fn::GetAtt': ['Recorder', 'AlarmUrl']}
      ok_actions:
        {'Fn::GetAtt': ['Recorder', 'AlarmUrl']}
      matching_metadata: {'metadata.user_metadata.server_group': 'WebServerGroup'}
      comparison_operator: lt
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-credentials:
              content:
                Fn::Replace:
                - $AWSAccessKeyId: {Ref: SmokeKeys}
                  $AWSSecretKey: {'Fn::GetAtt': [SmokeKeys, SecretAccessKey]}
                - |
                  AWSAccessKeyId=$AWSAccessKeyId
                  AWSSecretKey=$AWSSecretKey
              mode: '000400'
              owner: root
              group: root
            /root/watch_loop:
              content:
                - |
                  #!/bin/bash
                  while :
                  do
                    /opt/aws/bin/cfn-push-stats --cpu-util
                    sleep 4
                  done
              mode: '000700'
              owner: root
              group: root
            /root/consume_memory:
              content:
                Fn::Replace:
                - StackStart: {Ref: StackStart}
                  ConsumeStopSeconds: {Ref: ConsumeStopSeconds}
                - |
                  #!/usr/bin/env python
                  import psutil
                  import time
                  import datetime
                  a = []
                  while time.time() < StackStart + ConsumeStopSeconds:
                      timeout 8 cat /dev/zero > /dev/null
              mode: '000700'
              owner: root
              group: root
          packages:
            yum:
              python-psutil: []
    Properties:
      ImageId: {Ref: ImageId}
      InstanceType: {Ref: InstanceType}
      KeyName: {Ref: KeyName}
      SecurityGroups: [{Ref: SmokeSecurityGroup}]
      UserData:
        Fn::Base64:
          Fn::Replace:
          - {ConsumeStopSeconds: {Ref: ConsumeStopSeconds}}
          - |
            #!/bin/bash -v
            rm /etc/localtime
            ln -s /usr/share/zoneinfo/Australia/Melbourne /etc/localtime
            /opt/aws/bin/cfn-init
            # report on memory consumption every 4 seconds
            /root/watch_loop &
            # ramp up memory consumption until it is over 70%
            # then exits ConsumeStopSeconds seconds after stack launch
            /root/consume_memory &
